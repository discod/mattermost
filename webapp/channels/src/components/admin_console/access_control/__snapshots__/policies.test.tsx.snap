// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/admin_console/access_control/PolicyList should match snapshot with loading state 1`] = `
<div
  className="PolicyTable"
>
  <div
    className="policy-header"
  >
    <div
      className="policy-header-text"
    >
      <h1>
        Access policies
      </h1>
      <p>
        Create policies containing attribute based access rules and the objects they apply to.
      </p>
    </div>
    <button
      className="btn btn-primary"
      onClick={[Function]}
    >
      <i
        className="icon icon-plus"
      />
      <span>
        Add policy
      </span>
    </button>
  </div>
  <DataGrid
    columns={
      Array [
        Object {
          "field": "name",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Name"
            id="admin.access_control.policies.name"
          />,
          "width": 5,
        },
        Object {
          "field": "resources",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Applies to"
            id="admin.access_control.policies.applies_to"
          />,
          "textAlign": "center",
          "width": 4,
        },
        Object {
          "className": "actions-column",
          "field": "actions",
          "name": <span />,
          "width": 1,
        },
      ]
    }
    endCount={0}
    loading={true}
    nextPage={[Function]}
    onSearch={[Function]}
    page={0}
    placeholderEmpty={
      <Memo(MemoizedFormattedMessage)
        defaultMessage="No policies found"
        id="admin.user_settings.policy_list.no_policies_found"
      />
    }
    previousPage={[Function]}
    rows={Array []}
    rowsContainerStyles={
      Object {
        "minHeight": "0px",
      }
    }
    startCount={1}
    term=""
    total={0}
  />
</div>
`;

exports[`components/admin_console/access_control/PolicyList should match snapshot with no policies 1`] = `
<div
  className="PolicyTable"
>
  <div
    className="policy-header"
  >
    <div
      className="policy-header-text"
    >
      <h1>
        Access policies
      </h1>
      <p>
        Create policies containing attribute based access rules and the objects they apply to.
      </p>
    </div>
    <button
      className="btn btn-primary"
      onClick={[Function]}
    >
      <i
        className="icon icon-plus"
      />
      <span>
        Add policy
      </span>
    </button>
  </div>
  <DataGrid
    columns={
      Array [
        Object {
          "field": "name",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Name"
            id="admin.access_control.policies.name"
          />,
          "width": 5,
        },
        Object {
          "field": "resources",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Applies to"
            id="admin.access_control.policies.applies_to"
          />,
          "textAlign": "center",
          "width": 4,
        },
        Object {
          "className": "actions-column",
          "field": "actions",
          "name": <span />,
          "width": 1,
        },
      ]
    }
    endCount={0}
    loading={true}
    nextPage={[Function]}
    onSearch={[Function]}
    page={0}
    placeholderEmpty={
      <Memo(MemoizedFormattedMessage)
        defaultMessage="No policies found"
        id="admin.user_settings.policy_list.no_policies_found"
      />
    }
    previousPage={[Function]}
    rows={Array []}
    rowsContainerStyles={
      Object {
        "minHeight": "0px",
      }
    }
    startCount={1}
    term=""
    total={0}
  />
</div>
`;

exports[`components/admin_console/access_control/PolicyList should match snapshot with policies 1`] = `
<div
  className="PolicyTable"
>
  <div
    className="policy-header"
  >
    <div
      className="policy-header-text"
    >
      <h1>
        Access policies
      </h1>
      <p>
        Create policies containing attribute based access rules and the objects they apply to.
      </p>
    </div>
    <button
      className="btn btn-primary"
      onClick={[Function]}
    >
      <i
        className="icon icon-plus"
      />
      <span>
        Add policy
      </span>
    </button>
  </div>
  <DataGrid
    columns={
      Array [
        Object {
          "field": "name",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Name"
            id="admin.access_control.policies.name"
          />,
          "width": 5,
        },
        Object {
          "field": "resources",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Applies to"
            id="admin.access_control.policies.applies_to"
          />,
          "textAlign": "center",
          "width": 4,
        },
        Object {
          "className": "actions-column",
          "field": "actions",
          "name": <span />,
          "width": 1,
        },
      ]
    }
    endCount={2}
    loading={true}
    nextPage={[Function]}
    onSearch={[Function]}
    page={0}
    placeholderEmpty={
      <Memo(MemoizedFormattedMessage)
        defaultMessage="No policies found"
        id="admin.user_settings.policy_list.no_policies_found"
      />
    }
    previousPage={[Function]}
    rows={
      Array [
        Object {
          "cells": Object {
            "actions": <div
              className="policy-actions"
            >
              <Menu
                menu={
                  Object {
                    "aria-label": "Policy actions menu",
                    "id": "policy-menu-dropdown-policy1",
                  }
                }
                menuButton={
                  Object {
                    "children": <i
                      className="icon icon-dots-vertical"
                    />,
                    "class": "policy-menu-button",
                    "id": "policy-menu-policy1",
                  }
                }
              >
                <MenuItem
                  id="policy-menu-edit-policy1"
                  labels={
                    <Memo(MemoizedFormattedMessage)
                      defaultMessage="Edit"
                      id="admin.access_control.edit"
                    />
                  }
                  leadingElement={
                    <i
                      className="icon icon-pencil-outline"
                    />
                  }
                  onClick={[Function]}
                />
                <MenuItem
                  disabled={false}
                  id="policy-menu-delete-policy1"
                  isDestructive={true}
                  labels={
                    <Memo(MemoizedFormattedMessage)
                      defaultMessage="Delete"
                      id="admin.access_control.delete"
                    />
                  }
                  leadingElement={
                    <i
                      className="icon icon-trash-can-outline"
                    />
                  }
                  onClick={[Function]}
                />
              </Menu>
            </div>,
            "name": <div
              className="policy-name"
              id="customDescription-policy1"
            >
              Policy 1
            </div>,
            "resources": <div
              className="policy-resources"
              id="customAppliedTo-policy1"
            >
              -
            </div>,
          },
          "onClick": [Function],
        },
        Object {
          "cells": Object {
            "actions": <div
              className="policy-actions"
            >
              <Menu
                menu={
                  Object {
                    "aria-label": "Policy actions menu",
                    "id": "policy-menu-dropdown-policy2",
                  }
                }
                menuButton={
                  Object {
                    "children": <i
                      className="icon icon-dots-vertical"
                    />,
                    "class": "policy-menu-button",
                    "id": "policy-menu-policy2",
                  }
                }
              >
                <MenuItem
                  id="policy-menu-edit-policy2"
                  labels={
                    <Memo(MemoizedFormattedMessage)
                      defaultMessage="Edit"
                      id="admin.access_control.edit"
                    />
                  }
                  leadingElement={
                    <i
                      className="icon icon-pencil-outline"
                    />
                  }
                  onClick={[Function]}
                />
                <MenuItem
                  disabled={false}
                  id="policy-menu-delete-policy2"
                  isDestructive={true}
                  labels={
                    <Memo(MemoizedFormattedMessage)
                      defaultMessage="Delete"
                      id="admin.access_control.delete"
                    />
                  }
                  leadingElement={
                    <i
                      className="icon icon-trash-can-outline"
                    />
                  }
                  onClick={[Function]}
                />
              </Menu>
            </div>,
            "name": <div
              className="policy-name"
              id="customDescription-policy2"
            >
              Policy 2
            </div>,
            "resources": <div
              className="policy-resources"
              id="customAppliedTo-policy2"
            >
              -
            </div>,
          },
          "onClick": [Function],
        },
      ]
    }
    rowsContainerStyles={
      Object {
        "minHeight": "80px",
      }
    }
    startCount={1}
    term=""
    total={2}
  />
</div>
`;

exports[`components/admin_console/access_control/PolicyList should match snapshot with search error 1`] = `
<div
  className="PolicyTable"
>
  <div
    className="policy-header"
  >
    <div
      className="policy-header-text"
    >
      <h1>
        Access policies
      </h1>
      <p>
        Create policies containing attribute based access rules and the objects they apply to.
      </p>
    </div>
    <button
      className="btn btn-primary"
      onClick={[Function]}
    >
      <i
        className="icon icon-plus"
      />
      <span>
        Add policy
      </span>
    </button>
  </div>
  <DataGrid
    columns={
      Array [
        Object {
          "field": "name",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Name"
            id="admin.access_control.policies.name"
          />,
          "width": 5,
        },
        Object {
          "field": "resources",
          "name": <Memo(MemoizedFormattedMessage)
            defaultMessage="Applies to"
            id="admin.access_control.policies.applies_to"
          />,
          "textAlign": "center",
          "width": 4,
        },
        Object {
          "className": "actions-column",
          "field": "actions",
          "name": <span />,
          "width": 1,
        },
      ]
    }
    endCount={0}
    loading={true}
    nextPage={[Function]}
    onSearch={[Function]}
    page={0}
    placeholderEmpty={
      <Memo(MemoizedFormattedMessage)
        defaultMessage="Something went wrong. Try again"
        id="admin.user_settings.policy_list.search_policy_errored"
      />
    }
    previousPage={[Function]}
    rows={Array []}
    rowsContainerStyles={
      Object {
        "minHeight": "0px",
      }
    }
    startCount={1}
    term=""
    total={0}
  />
</div>
`;

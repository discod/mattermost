// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.IconButton {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: fit-content;
    height: fit-content;
    border: none;
    border-radius: var(--radius-s);
    cursor: pointer;
    outline: none;
    transition: all 0.15s ease-out;
    background-color: transparent;
    
    // Focus states matching Button component
    &:focus {
        box-shadow: 0 0 0 2px var(--sidebar-text-active-border);
    }
    
    &:focus:not(:focus-visible) {
        box-shadow: none;
    }
    
    &:focus-visible {
        box-shadow: 0 0 0 2px var(--sidebar-text-active-border);
    }

    // Default state - using center-channel-color from Figma
    color: rgba(var(--center-channel-color-rgb), 0.64);
    
    &:hover:not(:disabled) {
        background-color: rgba(var(--center-channel-color-rgb), 0.08);
        color: rgba(var(--center-channel-color-rgb), 0.75);

        .IconButton__unread-indicator {
            box-shadow: 0 0 0 2px rgba(var(--center-channel-color-rgb), 0.08),
            0 0 0 2px var(--center-channel-bg);
        }
    }
    
    &:active:not(:disabled) {
        background-color: rgba(var(--link-color-rgb), 0.12);
        color: var(--link-color);

        .IconButton__unread-indicator {
            box-shadow: 0 0 0 2px rgba(var(--link-color-rgb), 0.12),
            0 0 0 2px var(--center-channel-bg);
        }
    }
    
    // Toggled state (primary button colors)
    &--toggled {
        background-color: var(--button-bg);
        color: var(--button-color);
        
        &:hover:not(:disabled) {
            background-color: color-mix(in srgb, var(--button-bg) 88%, black 12%);
            color: var(--button-color);
        }
        
        &:active:not(:disabled) {
            background-color: color-mix(in srgb, var(--button-bg) 80%, black 20%);
        }
    }
    
    // Destructive variant - using error-text
    &--destructive {
        color: var(--error-text);
        
        &:hover:not(:disabled) {
            background-color: rgba(var(--error-text-color-rgb), 0.08);
            color: var(--error-text);
        }
        
        &:active:not(:disabled) {
            background-color: rgba(var(--error-text-color-rgb), 0.16);
            color: var(--error-text);
        }
    }
    
    // Inverted style - using sidebar-text from Figma for dark backgrounds
    &--inverted {
        color: rgba(var(--sidebar-text-rgb), 0.64);

        .IconButton__unread-indicator {
            background-color: var(--sidebar-text);
            box-shadow: 0 0 0 2px var(--sidebar-bg);
        }
        
        &:hover:not(:disabled) {
            background-color: rgba(var(--sidebar-text-rgb), 0.08);
            color: rgba(var(--sidebar-text-rgb), 0.75);

            .IconButton__unread-indicator {
                box-shadow: 0 0 0 2px rgba(var(--sidebar-text-rgb), 0.08),
                0 0 0 2px var(--sidebar-bg);
            }
        }
        
        &:active:not(:disabled) {
            background-color: rgba(var(--sidebar-text-rgb), 0.16);
            color: var(--sidebar-text);

            .IconButton__unread-indicator {
                box-shadow: 0 0 0 2px rgba(var(--sidebar-text-rgb), 0.16),
                0 0 0 2px var(--sidebar-bg);
            }
        }
        
        // Inverted toggled state - uses sidebar text color
        &.IconButton--toggled {
            background-color: var(--sidebar-text);
            color: var(--sidebar-bg);
            
            &:hover:not(:disabled) {
                background-color: rgba(var(--sidebar-text-rgb), 0.88);
                color: var(--sidebar-bg);
            }
            
            &:active:not(:disabled) {
                background-color: rgba(var(--sidebar-text-rgb), 0.80);
                color: var(--sidebar-bg);
            }
        }
    }
    
    // Rounded variant
    &--rounded {
        border-radius: 50%;
    }
    
    // Size variants with default and compact padding
    &--xs {
        padding: 6px;
        
        &.IconButton--compact {
            padding: 4px;
        }
        
        .IconButton__icon {
            width: 12px;
            height: 12px;
        }
    }
    
    &--sm {
        padding: 8px;
        
        &.IconButton--compact {
            padding: 6px;
        }
        
        .IconButton__icon {
            width: 16px;
            height: 16px;
        }
    }
    
    &--md {
        padding: 10px;
        
        &.IconButton--compact {
            padding: 8px;
        }
        
        .IconButton__icon {
            width: 20px;
            height: 20px;
        }
    }
    
    &--lg {
        padding: 10px;
        
        &.IconButton--compact {
            padding: 8px;
        }
        
        .IconButton__icon {
            width: 28px;
            height: 28px;
        }
    }
    
    // Disabled state
    &:disabled {
        cursor: not-allowed;
        color: rgba(var(--center-channel-color-rgb), 0.32);
        background-color: transparent;
        
        &.IconButton--inverted {
            color: rgba(var(--button-color-rgb), 0.32);
        }
    }
    
    // With count variant - adjust layout and padding
    &--with-count {
        padding-left: 8px;
        padding-right: 12px;
        
        &.IconButton--xs {
            padding-left: 6px;
            padding-right: 8px;
        }
        
        &.IconButton--sm {
            padding-left: 6px;
            padding-right: 10px;
        }
        
        &.IconButton--lg {
            padding-left: 10px;
            padding-right: 16px;
        }
        
        &.IconButton--compact {
            padding-left: 6px;
            padding-right: 8px;
            
            &.IconButton--sm {
                padding-left: 4px;
                padding-right: 6px;
            }
            
            &.IconButton--lg {
                padding-left: 8px;
                padding-right: 12px;
            }
        }
    }
}

// Content container
.IconButton__content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    width: 100%;
    height: 100%;
}

// Icon container
.IconButton__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 0;
    flex-basis: min-content;
    flex-shrink: 0;
    overflow: visible;
    position: relative;

    svg {
        flex-shrink: 0;
    }
}

// Count text
.IconButton__count {
    font-weight: 600;
    line-height: 1;
    white-space: nowrap;
    flex-shrink: 0;
    
    &--xs {
        font-size: 11px;
    }
    
    &--sm {
        font-size: 12px;
    }
    
    &--md {
        font-size: 14px;
    }
    
    &--lg {
        font-size: 16px;
    }
}

// Unread indicator (notification dot)
.IconButton__unread-indicator {
    position: absolute;
    background-color: var(--button-bg);
    border-radius: 50%;
    box-shadow: 0 0 0 2px var(--center-channel-bg);
    width: 8px;
    height: 8px;
    right: 0;
    
    &--xs {
        top: -2px;
        width: 6px;
        height: 6px;
    }
    
    &--sm {
        top: -2px;
        width: 6px;
        height: 6px;
    }
    
    &--md {
        top: -3px;
    }
    
    &--lg {
        top: -3px;
    }
    
    // Destructive state uses error color
    .IconButton--destructive & {
        background-color: var(--error-text);
    }
}

// Spinner (reusing Button component patterns)
.IconButton__spinner {
    display: inline-block;
    border-radius: 50%;
    animation: spin 750ms linear infinite;
    background: conic-gradient(rgba(var(--center-channel-color-rgb), 0), rgba(var(--center-channel-color-rgb), 0.48));
    line-height: 0;
    
    &--xs { 
        width: 12px; 
        height: 12px;
        mask-image: radial-gradient(farthest-side, transparent calc(100% - 1.5px), #fff calc(100% - 1px));
    }
    
    &--sm { 
        width: 16px; 
        height: 16px;
        mask-image: radial-gradient(farthest-side, transparent calc(100% - 1.5px), #fff calc(100% - 1px));
    }
    
    &--md { 
        width: 20px; 
        height: 20px;
        mask-image: radial-gradient(farthest-side, transparent calc(100% - 2px), #fff calc(100% - 1.5px));
    }
    
    &--lg { 
        width: 24px; 
        height: 24px;
        mask-image: radial-gradient(farthest-side, transparent calc(100% - 2.5px), #fff calc(100% - 2px));
    }
    
    &--inverted {
        background: conic-gradient(rgba(var(--button-color-rgb), 0), rgba(var(--button-color-rgb), 0.48));
    }
}
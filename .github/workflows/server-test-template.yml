name: Server Test Template
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      datasource:
        required: true
        type: string
      drivername:
        required: true
        type: string
      logsartifact:
        required: true
        type: string
      fips-enabled:
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: ${{ inputs.name }}
    runs-on: ubuntu-latest
    env:
      COMPOSE_PROJECT_NAME: ghactions
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ee399b4c72dd4e58e3d617f78fc47b74733c9557/922f2d48307d6f5f      

      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Calculate Golang Version
        id: go
        working-directory: ./server
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"          

      - name: Setup Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: server/go.sum

      - name: Setup BUILD_IMAGE
        id: build
        run: |
          if [[ ${{ inputs.fips-enabled }} == 'true' ]]; then
            echo "IMAGE=cgr.dev/mattermost.com/go-msft-fips:1.22-dev" >> "${GITHUB_OUTPUT}"
            echo "LOG_ARTIFACT_NAME=${{ inputs.logsartifact }}-fips" >> "${GITHUB_OUTPUT}"
          else
            echo "IMAGE=mattermostdevelopment/mattermost-build-server:${{ steps.go.outputs.GO_VERSION }}" >> "${GITHUB_OUTPUT}"
            echo "LOG_ARTIFACT_NAME=${{ inputs.logsartifact }}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Store required variables for publishing results
        run: |
          echo "${{ inputs.name }}" > server/test-name
          echo "${{ github.event.pull_request.number }}" > server/pr-number

      - name: Run docker compose
        run: |
          cd server/build
          docker compose --ansi never run --rm start_dependencies
          cat ../tests/custom-schema-objectID.ldif | docker compose --ansi never exec -T openldap bash -c 'ldapadd -Y EXTERNAL -H ldapi:/// -w mostest || true';
          cat ../tests/custom-schema-cpa.ldif | docker compose --ansi never exec -T openldap bash -c 'ldapadd -Y EXTERNAL -H ldapi:/// -w mostest || true';
          cat ../tests/test-data.ldif | docker compose --ansi never exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker compose --ansi never exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker compose --ansi never ps

      - name: Run Tests with FIPS
        if: ${{ inputs.fips-enabled }}
        env:
          BUILD_IMAGE: ${{ steps.build.outputs.IMAGE }}
        run: |
          if [[ ${{ github.ref_name }} == 'master' ]]; then
            export RACE_MODE="-race"
          fi
          docker run --net ghactions_mm-test \
            --entrypoint make \
            --ulimit nofile=8096:8096 \
            --env-file=server/build/dotenv/test.env \
            --env MM_SQLSETTINGS_DRIVERNAME="${{ inputs.drivername }}" \
            --env FIPS_TEST_ENABLED=true \
            --env MM_SQLSETTINGS_DATASOURCE="${{ inputs.datasource }}" \
            --env TEST_DATABASE_MYSQL_DSN="${{ inputs.datasource }}" \
            --env TEST_DATABASE_POSTGRESQL_DSN="${{ inputs.datasource }}" \
            --env GOBIN=/root/go/bin \
            --env GOFLAGS="-buildvcs=false" \
            -v $PWD:/mattermost \
            -w /mattermost/server \
            $BUILD_IMAGE \
            test-server$RACE_MODE BUILD_NUMBER=$GITHUB_HEAD_REF-$GITHUB_RUN_ID

      - name: Run Tests without FIPS
        if: ${{ ! inputs.fips-enabled }}
        env:
          BUILD_IMAGE: ${{ steps.build.outputs.IMAGE }}
        run: |            
          if [[ ${{ github.ref_name }} == 'master' ]]; then
            export RACE_MODE="-race"
          fi
          docker run --net ghactions_mm-test \
            --ulimit nofile=8096:8096 \
            --env-file=server/build/dotenv/test.env \
            --env MM_SQLSETTINGS_DRIVERNAME="${{ inputs.drivername }}" \
            --env MM_SQLSETTINGS_DATASOURCE="${{ inputs.datasource }}" \
            --env TEST_DATABASE_MYSQL_DSN="${{ inputs.datasource }}" \
            --env TEST_DATABASE_POSTGRESQL_DSN="${{ inputs.datasource }}" \
            -v $(go env GOCACHE):/go/cache \
            -e GOCACHE=/go/cache \
            -v $PWD:/mattermost \
            -w /mattermost/server \
            $BUILD_IMAGE \
            make test-server$RACE_MODE BUILD_NUMBER=$GITHUB_HEAD_REF-$GITHUB_RUN_ID            
            
      - name: Stop docker compose
        run: |
          cd server/build
          docker compose --ansi never stop

      - name: Archive logs
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.build.outputs.LOG_ARTIFACT_NAME }}
          path: |
            server/gotestsum.json
            server/report.xml
            server/test-name
            server/pr-number

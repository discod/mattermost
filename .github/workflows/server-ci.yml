name: Server CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    paths:
      - "server/**"
      - "e2e-tests/**"
      - ".github/workflows/server-ci.yml"
      - ".github/workflows/server-test-template.yml"
      - ".github/workflows/mmctl-test-template.yml"
      - "!server/build/Dockerfile.buildenv"
      - "!server/build/Dockerfile.buildenv-fips"

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.ref) || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  go:
    name: Compute Go Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.calculate.outputs.GO_VERSION }}
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate version
        id: calculate
        working-directory: server/
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
  check-go-mod-tidy:
    name: Check go mod tidy
    needs: go
    runs-on: ubuntu-22.04
    container: mattermostdevelopment/mattermost-build-server:${{ needs.go.outputs.version }}
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run go mod tidy
        run: make modules-tidy
      - name: Check modules
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please tidy up the Go modules using make modules-tidy"; git diff; exit 1; fi
  check-style:
    name: Check style
    needs: go
    runs-on: ubuntu-22.04
    container: mattermostdevelopment/mattermost-build-server:${{ needs.go.outputs.version }}
    defaults:
      run:
        working-directory: server
    env:
      GOFLAGS: -buildvcs=false # TODO: work around "error obtaining VCS status: exit status 128" in a container
    steps:
      - name: Restore Go cache
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          # always grab from the restore-keys pattern below,
          # like Linux-go-$hash-YYYY-MM-DD as saved by CI
          key: nonexistent
          restore-keys: |
            check-style-${{ runner.os }}-go-${{ hashFiles('go.mod') }}-
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Download Go modules
        run: go mod download
        shell: bash
      - name: Run check-style
        run: make check-style
      - name: Trim Go Cache
        if: ${{ github.ref_name == 'master' }}
        shell: bash
        run: |
          # Prune the cache of files not touched in the past 5 days.
          find ~/.cache/go-build -type f -mmin +90 -delete
      - name: Set Go cache date
        if: ${{ github.ref_name == 'master' }}
        shell: bash
        run: |
          # Generate a cache key for the current date, effectively updating caches daily.
          echo "GO_CACHE_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: Save Go cache
        if: ${{ github.ref_name == 'master' }}
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # Caches both the downloaded modules and the compiled build cache.
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          # Save to eg Linux-go-$hash-YYYY-MM-DD to keep the cache fresh
          key: "check-style-${{ runner.os }}-go-${{ hashFiles('go.mod') }}-${{ env.GO_CACHE_DATE }}"
  check-generated:
    name: Check generated
    needs: go
    runs-on: ubuntu-22.04
    container: mattermostdevelopment/mattermost-build-server:${{ needs.go.outputs.version }}
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run generated
        run: make generated
      - name: Check generated
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the generated files using 'make genenerated'"; exit 1; fi
  test-postgres-binary:
    if: github.event_name == 'push' # Only run postgres binary tests on master/release pushes: odds are low this regresses, so save the cycles for pull requests.
    name: Postgres with binary parameters
    needs: go
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Postgres with binary parameters
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes
      drivername: postgres
      logsartifact: postgres-binary-server-test-logs
      go-version: ${{ needs.go.outputs.version }}
      fips-enabled: false
  test-postgres-normal:
    name: Postgres
    needs: go
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Postgres
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: postgres-server-test-logs
      go-version: ${{ needs.go.outputs.version }}
      fips-enabled: false
  test-postgres-normal-fips:
    # Skip FIPS testing for forks, which won't have docker login credentials.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    name: Postgres (FIPS)
    needs: go
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Postgres
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: postgres-server-test-logs
      go-version: ${{ needs.go.outputs.version }}
      fips-enabled: true
  test-coverage:
    name: Generate Test Coverage
    # Skip coverage generation for cherry-pick PRs into release branches.
    if: ${{ github.event_name != 'pull_request' || !startsWith(github.event.pull_request.base.ref, 'release-') }}
    needs: go
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Generate Test Coverage
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: coverage-server-test-logs
      fullyparallel: true
      enablecoverage: true
      go-version: ${{ needs.go.outputs.version }}
  test-mmctl:
    name: Run mmctl tests
    needs: go
    uses: ./.github/workflows/mmctl-test-template.yml
    secrets: inherit
    with:
      name: mmctl
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: mmctl-test-logs
      go-version: ${{ needs.go.outputs.version }}
      fips-enabled: false
  test-mmctl-fips:
    name: Run mmctl tests (FIPS)
    # Skip FIPS testing for forks, which won't have docker login credentials.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    needs: go
    uses: ./.github/workflows/mmctl-test-template.yml
    secrets: inherit
    with:
      name: mmctl
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: mmctl-test-logs
      go-version: ${{ needs.go.outputs.version }}
      fips-enabled: true
  build-mattermost-server:
    name: Build mattermost server app
    needs: go
    runs-on: ubuntu-22.04
    container: mattermostdevelopment/mattermost-build-server:${{ needs.go.outputs.version }}
    defaults:
      run:
        working-directory: server
    env:
      GOFLAGS: -buildvcs=false # TODO: work around "error obtaining VCS status: exit status 128" in a container
      BUILD_NUMBER: "${GITHUB_HEAD_REF}-${GITHUB_RUN_ID}"
      FIPS_ENABLED: false
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Build
        run: |
          make config-reset
          make build-cmd
          make package
      - name: Persist dist artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: server-dist-artifact
          path: server/dist/
          if-no-files-found: error
          compression-level: 0
          retention-days: 2
      - name: Persist build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: server-build-artifact
          path: server/build/
          retention-days: 2

# Base CI template which is called from server-ci-pr.yml
# and server-ci-master.yml

name: Server CI Template
on:
  workflow_call:
    inputs:
      fips-enabled:
        required: false
        default: false
        type: boolean

env:
  FIPS_ENABLED: ${{ inputs.fips-enabled }}
  CHAINCTL_IDENTITY: ee399b4c72dd4e58e3d617f78fc47b74733c9557/922f2d48307d6f5f

permissions:
  id-token: write
  contents: read

jobs:
  check-mocks:
    name: Check mocks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum

      - name: Run setup-go-work
        run: make setup-go-work
      - name: Install mock deps
        run: make install-mock-deps
      - name: Generate mocks
        run: make mocks
      - name: Check mocks
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the mocks using `make mocks`"; exit 1; fi
  check-go-mod-tidy:
    name: Check go mod tidy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum

      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run go mod tidy
        run: make modules-tidy
      - name: Check modules
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please tidy up the Go modules using make modules-tidy"; git status; exit 1; fi
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run golangci
        env:
          GOFLAGS: -buildvcs=false
        run: make golangci-lint
  check-gen-serialized:
    name: Check serialization methods for hot structs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run make-gen-serialized
        run: make gen-serialized
      - name: Check serialized
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the serialized files using 'make gen-serialized'"; exit 1; fi
  check-mattermost-vet:
    name: Check style
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Reset config
        env:
          OUTPUT_CONFIG: config/config.json
        run: make config-reset
      - name: Run plugin-checker
        run: make plugin-checker
      - name: Run mattermost-vet
        env:
          MM_NO_ENTERPRISE_LINT: true
        run: make vet BUILD_NUMBER='${GITHUB_HEAD_REF}'
  check-mattermost-vet-api:
    name: Vet API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Run mattermost-vet-api
        run: make vet-api
  check-migrations:
    name: Check migration files
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Extract migrations files
        run: make migrations-extract
      - name: Check migration files
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the migrations using make migrations-extract"; exit 1; fi
  check-email-templates:
    name: Generate email templates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Generate email templates
        run: |
          sudo npm install -g mjml@4.9.0
          make build-templates
      - name: Check generated email templates
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the email templates using `make build-templates`"; exit 1; fi
  check-store-layers:
    name: Check store layers
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Generate store layers
        run: make store-layers
      - name: Check generated code
        run: if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi

  check-mmctl-docs:
    name: Check mmctl docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost-server
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: Run setup-go-work
        run: make setup-go-work
      - name: Check docs
        run: |
          echo "Making sure docs are updated"
          make mmctl-docs
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the mmctl docs using make mmctl-docs"; exit 1; fi
  test-postgres-binary:
    if: github.ref_name != 'master' # Do not run postgres binary tests on master
    name: Postgres with binary parameters
    needs: check-mattermost-vet
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Postgres with binary parameters
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes
      drivername: postgres
      logsartifact: postgres-binary-server-test-logs
      fips-enabled: ${{ inputs.fips-enabled }}
  test-postgres-normal:
    name: Postgres
    needs: check-mattermost-vet
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Postgres
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: postgres-server-test-logs
      fips-enabled: ${{ inputs.fips-enabled }}
  test-coverage:
    # Skip coverage generation for cherry-pick PRs into release branches.
    if: ${{ github.event_name != 'pull_request' || !startsWith(github.event.pull_request.base.ref, 'release-') }}
    name: Generate Test Coverage
    needs: check-mattermost-vet
    uses: ./.github/workflows/server-test-template.yml
    secrets: inherit
    with:
      name: Generate Test Coverage
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: coverage-server-test-logs
      fullyparallel: true
      enablecoverage: true
      fips-enabled: ${{ inputs.fips-enabled }}
  test-mmctl:
    name: Run mmctl tests
    needs: check-mattermost-vet
    uses: ./.github/workflows/mmctl-test-template.yml
    secrets: inherit
    with:
      name: mmctl
      datasource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
      drivername: postgres
      logsartifact: mmctl-test-logs
      fips-enabled: ${{ inputs.fips-enabled }}
  build-mattermost-server:
    name: Build mattermost server app
    runs-on: ubuntu-latest
    env:
      BUILD_NUMBER: "${{ github.head_ref }}-${{ github.run_id }}"
    defaults:
      run:
        working-directory: server
    needs: check-mattermost-vet
    steps:
      - uses: chainguard-dev/setup-chainctl@main
        if: ${{ inputs.fips-enabled }}
        with:
          identity: ${{ env.CHAINCTL_IDENTITY }}
      - name: Checkout mattermost project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Calculate Golang Version
        id: go
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        if: ${{ ! inputs.fips-enabled }}
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: |
            server/go.sum
            server/public/go.sum
      - name: ci/setup-node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        id: setup_node
        with:
          node-version-file: ".nvmrc"
          cache: npm
          cache-dependency-path: "webapp/package-lock.json"
      - name: Setup FIPS Go Bin
        if: ${{ inputs.fips-enabled }}
        run: mkdir -p .go/bin
      - name: Run common work
        env:
          OUTPUT_CONFIG: config/config.json
        run: |
          make setup-go-work
          make config-reset
      - name: Build FIPS enabled server
        if: ${{ inputs.fips-enabled }}
        run: |
          make build-client
          make build-cmd-linux-amd64
          make package-linux-amd64
      - name: Build
        if: ${{ ! inputs.fips-enabled }}
        run: |
          make build-cmd
          make package

      - name: Setup LOG_ARTIFACT_NAME
        id: build
        run: |
          if [[ ${{ inputs.fips-enabled }} == 'true' ]]; then
            echo "SERVER_DIST_ARTIFACT_NAME=server-dist-artifact-fips" >> "${GITHUB_OUTPUT}"
            echo "SERVER_BUILD_ARTIFACT_NAME=server-build-artifact-fips" >> "${GITHUB_OUTPUT}"
          else
            echo "SERVER_DIST_ARTIFACT_NAME=server-dist-artifact" >> "${GITHUB_OUTPUT}"
            echo "SERVER_BUILD_ARTIFACT_NAME=server-build-artifact" >> "${GITHUB_OUTPUT}"
          fi

      - name: Persist dist artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.build.outputs.SERVER_DIST_ARTIFACT_NAME }}
          path: server/dist/
          if-no-files-found: error
          compression-level: 0
          retention-days: 2
      - name: Persist build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.build.outputs.SERVER_BUILD_ARTIFACT_NAME }}
          path: server/build/
          retention-days: 2

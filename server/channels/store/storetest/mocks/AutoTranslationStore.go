// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// AutoTranslationStore is an autogenerated mock type for the AutoTranslationStore type
type AutoTranslationStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: rctx, objectType, objectID, dstLang
func (_m *AutoTranslationStore) Get(rctx request.CTX, objectType string, objectID string, dstLang string) (*model.Translation, *model.AppError) {
	ret := _m.Called(rctx, objectType, objectID, dstLang)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Translation
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, string) (*model.Translation, *model.AppError)); ok {
		return rf(rctx, objectType, objectID, dstLang)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, string) *model.Translation); ok {
		r0 = rf(rctx, objectType, objectID, dstLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string, string) *model.AppError); ok {
		r1 = rf(rctx, objectType, objectID, dstLang)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetActiveDestinationLanguages provides a mock function with given fields: rctx, channelID, excludeUserID, filterUserIDs
func (_m *AutoTranslationStore) GetActiveDestinationLanguages(rctx request.CTX, channelID string, excludeUserID string, filterUserIDs *[]string) ([]string, *model.AppError) {
	ret := _m.Called(rctx, channelID, excludeUserID, filterUserIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveDestinationLanguages")
	}

	var r0 []string
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, *[]string) ([]string, *model.AppError)); ok {
		return rf(rctx, channelID, excludeUserID, filterUserIDs)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, *[]string) []string); ok {
		r0 = rf(rctx, channelID, excludeUserID, filterUserIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string, *[]string) *model.AppError); ok {
		r1 = rf(rctx, channelID, excludeUserID, filterUserIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetUserLanguage provides a mock function with given fields: rctx, userID, channelID
func (_m *AutoTranslationStore) GetUserLanguage(rctx request.CTX, userID string, channelID string) (string, *model.AppError) {
	ret := _m.Called(rctx, userID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLanguage")
	}

	var r0 string
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) (string, *model.AppError)); ok {
		return rf(rctx, userID, channelID)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) string); ok {
		r0 = rf(rctx, userID, channelID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string) *model.AppError); ok {
		r1 = rf(rctx, userID, channelID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// IsChannelEnabled provides a mock function with given fields: rctx, channelID
func (_m *AutoTranslationStore) IsChannelEnabled(rctx request.CTX, channelID string) (bool, *model.AppError) {
	ret := _m.Called(rctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for IsChannelEnabled")
	}

	var r0 bool
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string) (bool, *model.AppError)); ok {
		return rf(rctx, channelID)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) bool); ok {
		r0 = rf(rctx, channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) *model.AppError); ok {
		r1 = rf(rctx, channelID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// IsUserEnabled provides a mock function with given fields: rctx, userID, channelID
func (_m *AutoTranslationStore) IsUserEnabled(rctx request.CTX, userID string, channelID string) (bool, *model.AppError) {
	ret := _m.Called(rctx, userID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserEnabled")
	}

	var r0 bool
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) (bool, *model.AppError)); ok {
		return rf(rctx, userID, channelID)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) bool); ok {
		r0 = rf(rctx, userID, channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string) *model.AppError); ok {
		r1 = rf(rctx, userID, channelID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: rctx, objectType, objectID, dstLang, providerID, normHash, text, confidence, meta
func (_m *AutoTranslationStore) Save(rctx request.CTX, objectType string, objectID string, dstLang string, providerID string, normHash string, text string, confidence *float64, meta map[string]interface{}) *model.AppError {
	ret := _m.Called(rctx, objectType, objectID, dstLang, providerID, normHash, text, confidence, meta)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, string, string, string, string, *float64, map[string]interface{}) *model.AppError); ok {
		r0 = rf(rctx, objectType, objectID, dstLang, providerID, normHash, text, confidence, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// Search provides a mock function with given fields: rctx, dstLang, searchTerm, limit
func (_m *AutoTranslationStore) Search(rctx request.CTX, dstLang string, searchTerm string, limit int) ([]*model.Translation, *model.AppError) {
	ret := _m.Called(rctx, dstLang, searchTerm, limit)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*model.Translation
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, int) ([]*model.Translation, *model.AppError)); ok {
		return rf(rctx, dstLang, searchTerm, limit)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, int) []*model.Translation); ok {
		r0 = rf(rctx, dstLang, searchTerm, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string, int) *model.AppError); ok {
		r1 = rf(rctx, dstLang, searchTerm, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// SetChannelEnabled provides a mock function with given fields: rctx, channelID, enabled
func (_m *AutoTranslationStore) SetChannelEnabled(rctx request.CTX, channelID string, enabled bool) *model.AppError {
	ret := _m.Called(rctx, channelID, enabled)

	if len(ret) == 0 {
		panic("no return value specified for SetChannelEnabled")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, bool) *model.AppError); ok {
		r0 = rf(rctx, channelID, enabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// SetUserEnabled provides a mock function with given fields: rctx, userID, channelID, enabled
func (_m *AutoTranslationStore) SetUserEnabled(rctx request.CTX, userID string, channelID string, enabled bool) *model.AppError {
	ret := _m.Called(rctx, userID, channelID, enabled)

	if len(ret) == 0 {
		panic("no return value specified for SetUserEnabled")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, string, bool) *model.AppError); ok {
		r0 = rf(rctx, userID, channelID, enabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// NewAutoTranslationStore creates a new instance of AutoTranslationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAutoTranslationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AutoTranslationStore {
	mock := &AutoTranslationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

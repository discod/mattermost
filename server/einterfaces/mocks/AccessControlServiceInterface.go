// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// AccessControlServiceInterface is an autogenerated mock type for the AccessControlServiceInterface type
type AccessControlServiceInterface struct {
	mock.Mock
}

// AccessEvaluation provides a mock function with given fields: rctx, accessRequest
func (_m *AccessControlServiceInterface) AccessEvaluation(rctx request.CTX, accessRequest model.AccessRequest) (model.AccessDecision, error) {
	ret := _m.Called(rctx, accessRequest)

	if len(ret) == 0 {
		panic("no return value specified for AccessEvaluation")
	}

	var r0 model.AccessDecision
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, model.AccessRequest) (model.AccessDecision, error)); ok {
		return rf(rctx, accessRequest)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, model.AccessRequest) model.AccessDecision); ok {
		r0 = rf(rctx, accessRequest)
	} else {
		r0 = ret.Get(0).(model.AccessDecision)
	}

	if rf, ok := ret.Get(1).(func(request.CTX, model.AccessRequest) error); ok {
		r1 = rf(rctx, accessRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckExpression provides a mock function with given fields: rctx, expression
func (_m *AccessControlServiceInterface) CheckExpression(rctx request.CTX, expression string) ([]model.CELExpressionError, *model.AppError) {
	ret := _m.Called(rctx, expression)

	if len(ret) == 0 {
		panic("no return value specified for CheckExpression")
	}

	var r0 []model.CELExpressionError
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string) ([]model.CELExpressionError, *model.AppError)); ok {
		return rf(rctx, expression)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) []model.CELExpressionError); ok {
		r0 = rf(rctx, expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CELExpressionError)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) *model.AppError); ok {
		r1 = rf(rctx, expression)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: rctx, id
func (_m *AccessControlServiceInterface) DeletePolicy(rctx request.CTX, id string) *model.AppError {
	ret := _m.Called(rctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string) *model.AppError); ok {
		r0 = rf(rctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// GetBasicAutocompleteFields provides a mock function with given fields:
func (_m *AccessControlServiceInterface) GetBasicAutocompleteFields() (map[string]interface{}, *model.AppError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBasicAutocompleteFields")
	}

	var r0 map[string]interface{}
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, *model.AppError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: rctx, id
func (_m *AccessControlServiceInterface) GetPolicy(rctx request.CTX, id string) (*model.AccessControlPolicy, *model.AppError) {
	ret := _m.Called(rctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *model.AccessControlPolicy
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string) (*model.AccessControlPolicy, *model.AppError)); ok {
		return rf(rctx, id)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) *model.AccessControlPolicy); ok {
		r0 = rf(rctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessControlPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) *model.AppError); ok {
		r1 = rf(rctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// Init provides a mock function with given fields: rctx
func (_m *AccessControlServiceInterface) Init(rctx request.CTX) *model.AppError {
	ret := _m.Called(rctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX) *model.AppError); ok {
		r0 = rf(rctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// SavePolicy provides a mock function with given fields: rctx, policy
func (_m *AccessControlServiceInterface) SavePolicy(rctx request.CTX, policy *model.AccessControlPolicy) (*model.AccessControlPolicy, *model.AppError) {
	ret := _m.Called(rctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for SavePolicy")
	}

	var r0 *model.AccessControlPolicy
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, *model.AccessControlPolicy) (*model.AccessControlPolicy, *model.AppError)); ok {
		return rf(rctx, policy)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, *model.AccessControlPolicy) *model.AccessControlPolicy); ok {
		r0 = rf(rctx, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessControlPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, *model.AccessControlPolicy) *model.AppError); ok {
		r1 = rf(rctx, policy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// NewAccessControlServiceInterface creates a new instance of AccessControlServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessControlServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessControlServiceInterface {
	mock := &AccessControlServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
